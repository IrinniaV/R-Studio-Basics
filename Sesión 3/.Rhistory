library(sf)
library(ggplot2)
install.packages("rnaturalearth")
install.packages("rnaturalearth")
install.packages("plotly")
library(pacman)
pacman::p_load(dplyr, ggplot2, tidyr, knitr, rio, haven,foreign, psych, reshape2, Hmisc, forcats)
# Instalar paquetes si es necesario
if (!requireNamespace("sf", quietly = TRUE)) install.packages("sf")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("rnaturalearth", quietly = TRUE)) install.packages("rnaturalearth")
if (!requireNamespace("rnaturalearthdata", quietly = TRUE)) install.packages("rnaturalearthdata")
if (!requireNamespace("plotly", quietly = TRUE)) install.packages("plotly")
# Cargar paquetes
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearth)
install.packages("Rcpp")
install.packages("Rcpp")
library(rnaturalearth)
library(pacman)
pacman::p_load(dplyr, ggplot2, tidyr, knitr, rio, haven,foreign, psych, reshape2, Hmisc, forcats)
# Cargar paquetes
library(sf)
library(ggplot2)
library(rnaturalearth)
library(plotly)
# Cargar datos
data(nc, package = "sf")
world <- ne_countries(scale = "medium", returnclass = "sf")
```
```{r}
# Asegurarse de que rnaturalearth está instalado y cargado
if (!requireNamespace("rnaturalearth", quietly = TRUE)) {
install.packages("rnaturalearth")
}
library(rnaturalearth)
# Cargar las ciudades
cities <- ne_cities(returnclass = "sf")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("rnaturalearthdata")
library(pacman)
pacman::p_load(dplyr, ggplot2, tidyr, knitr, rio, haven,foreign, psych, reshape2, Hmisc, forcats)
# Asegurarse de que rnaturalearth está instalado y cargado
if (!requireNamespace("rnaturalearth", quietly = TRUE)) {
install.packages("rnaturalearth")
}
library(rnaturalearth)
# Cargar las ciudades
cities <- ne_cities(returnclass = "sf")
library(rnaturalearth)
cities <- ne_download(scale = 110, type = 'cities', category = 'cultural', returnclass = "sf")
# Asegurarse de que rnaturalearth está instalado y cargado
if (!requireNamespace("rnaturalearth", quietly = TRUE)) {
install.packages("rnaturalearth")
}
library(rnaturalearth)
# Cargar las ciudades
cities <- ne_download(scale = 110, type = 'cities', category = 'cultural', returnclass = "sf")
# Asegúrate de que los datos 'world' están cargados como se indicó anteriormente
# Si 'world' no está definido, aquí tienes cómo cargarlo:
if (!requireNamespace("rnaturalearthdata", quietly = TRUE)) {
install.packages("rnaturalearthdata")
}
world <- ne_countries(scale = "medium", returnclass = "sf")
# Usar ggplot2 para crear el mapa
library(ggplot2)
ggplot(data = world) +
geom_sf(fill = "lightblue", color = "white") +
geom_sf(data = cities, aes(size = pop_max), color = "red", alpha = 0.6) +
scale_size(range = c(1, 10)) +
labs(title = "Mapa Mundial con Ciudades Importantes", size = "Población Máxima") +
theme_minimal()
library(rnaturalearth)
# Cargar las ciudades
cities <- ne_download(scale = 110, type = 'cities', category = 'cultural', returnclass = "sf")
# Asegúrate de que los datos 'world' están cargados como se indicó anteriormente
# Si 'world' no está definido, aquí tienes cómo cargarlo:
world <- ne_countries(scale = "medium", returnclass = "sf")
colnames(cities)
library(rnaturalearth)
update.packages()
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("DT")
install.packages("formattable")
library (mtcars)
library ('mtcars')
data = mtcars
View(data)
summary(mtcars$mpg)  # Resumen estadístico de millas por galón
sd(mtcars$mpg)
library(ggplot2)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relación entre HP y MPG",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_minimal()
library(ggplot2)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Relación entre HP y MPG",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_minimal()
?lm
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, colour = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), colour = "blue", se = FALSE) +
labs(title = "Comparación de Modelos Lineal vs Cuadrático",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_minimal(economics)
modelo_cuadratico <- lm(mpg ~ hp + I(hp^2), data = mtcars)
summary(modelo_cuadratico)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, colour = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), colour = "blue", se = FALSE) +
labs(title = "Comparación de Modelos Lineal vs Cuadrático",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_minimal(economics)
correlacion <- cor(mtcars$hp, mtcars$mpg)
summary(modelo_lineal)
modelo_lineal <- lm(mpg ~ hp, data = mtcars)
modelo_lineal <- lm(mpg ~ hp, data = mtcars)
summary(modelo_lineal)
modelo_cuadratico <- lm(mpg ~ hp + I(hp^2), data = mtcars)
summary(modelo_cuadratico)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, colour = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), colour = "blue", se = FALSE) +
labs(title = "Comparación de Modelos Lineal vs Cuadrático",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_minimal(economics)
# Visualizar los datos y los modelos
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, colour = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), colour = "blue", se = FALSE) +
labs(title = "Comparación de Modelos Lineal vs Cuadrático",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_minimal('economics')
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, colour = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), colour = "blue", se = FALSE) +
labs(title = "Comparación de Modelos Lineal vs Cuadrático",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_economist()
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, colour = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), colour = "blue", se = FALSE) +
labs(title = "Comparación de Modelos Lineal vs Cuadrático",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_economist()
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, colour = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), colour = "blue", se = FALSE) +
labs(title = "Comparación de Modelos Lineal vs Cuadrático",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_dark ()
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, colour = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), colour = "blue", se = FALSE) +
labs(title = "Comparación de Modelos Lineal vs Cuadrático",
x = "Caballaje (HP)", y = "Millas por Galón (MPG)") +
theme_test ()
